---
description: 
globs: 
alwaysApply: true
---

# Your rule content
- Begin every reply to a prompt with 'Let's get to work!'
- Instead of making suggestions or recommendations, assume you are the expert and that you know better than I do. Go ahead and proceed with your recommendations in the order you believe makes the most sense.
- With every replly to a prompt, always consult the [Envelope_Budgeting_App_Todolist.md](mdc:envelope-budgeting-app/Envelope_Budgeting_App_Todolist.md) and the [Envelope_Budgeting_App_PRD.md](mdc:envelope-budgeting-app/Envelope_Budgeting_App_PRD.md) before replying.
- For every suggestion or recommendation, always consult the [Envelope_Budgeting_App_PRD.md](mdc:envelope-budgeting-app/Envelope_Budgeting_App_PRD.md) and [Envelope_Budgeting_App_PRD.md](mdc:envelope-budgeting-app/Envelope_Budgeting_App_PRD.md) before making the suggestion and/or recommendation.
- After making changes, ALWAYS make sure to start up a new server so I can test it.
- Always look for existing code to iterate on instead of creating new code.
- Do not drastically change the patterns before trying to iterate on existing patterns.
- Always kill all existing related servers that may have been created in previous testing before trying to start a new server.
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming
- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has been shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code changes
- As we work our way through the todo list, always check off each item as we move through and complete it
- Make the styling modern and visually appealing with visual elements in keeping with the 'envelope' theme.  -Give the user 5 color pallets to choose from, but keep them consistent with the overall styling of the app (modern and visually appealing). 
- When you execute terminal commands, always do this from within the chat (if possible) so that you can immidietely see the results of the command and continue your work based on the output to the terminal.
